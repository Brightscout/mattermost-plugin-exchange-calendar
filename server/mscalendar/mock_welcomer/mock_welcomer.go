// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-mscalendar/server/mscalendar (interfaces: Welcomer)

// Package mock_welcomer is a generated GoMock package.
package mock_welcomer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWelcomer is a mock of Welcomer interface.
type MockWelcomer struct {
	ctrl     *gomock.Controller
	recorder *MockWelcomerMockRecorder
}

// MockWelcomerMockRecorder is the mock recorder for MockWelcomer.
type MockWelcomerMockRecorder struct {
	mock *MockWelcomer
}

// NewMockWelcomer creates a new mock instance.
func NewMockWelcomer(ctrl *gomock.Controller) *MockWelcomer {
	mock := &MockWelcomer{ctrl: ctrl}
	mock.recorder = &MockWelcomerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWelcomer) EXPECT() *MockWelcomerMockRecorder {
	return m.recorder
}

// AfterDisconnect mocks base method.
func (m *MockWelcomer) AfterDisconnect(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterDisconnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterDisconnect indicates an expected call of AfterDisconnect.
func (mr *MockWelcomerMockRecorder) AfterDisconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterDisconnect", reflect.TypeOf((*MockWelcomer)(nil).AfterDisconnect), arg0)
}

// AfterSuccessfullyConnect mocks base method.
func (m *MockWelcomer) AfterSuccessfullyConnect(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterSuccessfullyConnect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterSuccessfullyConnect indicates an expected call of AfterSuccessfullyConnect.
func (mr *MockWelcomerMockRecorder) AfterSuccessfullyConnect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterSuccessfullyConnect", reflect.TypeOf((*MockWelcomer)(nil).AfterSuccessfullyConnect), arg0, arg1)
}

// Welcome mocks base method.
func (m *MockWelcomer) Welcome(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Welcome", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Welcome indicates an expected call of Welcome.
func (mr *MockWelcomerMockRecorder) Welcome(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Welcome", reflect.TypeOf((*MockWelcomer)(nil).Welcome), arg0)
}

// WelcomeFlowEnd mocks base method.
func (m *MockWelcomer) WelcomeFlowEnd(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WelcomeFlowEnd", arg0)
}

// WelcomeFlowEnd indicates an expected call of WelcomeFlowEnd.
func (mr *MockWelcomerMockRecorder) WelcomeFlowEnd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WelcomeFlowEnd", reflect.TypeOf((*MockWelcomer)(nil).WelcomeFlowEnd), arg0)
}
